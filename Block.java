import java.util.Date;

/**
 * The Block class represents a single block in a blockchain.
 * Each block contains data, a hash, a reference to the previous block's hash,
 * a timestamp, and a nonce for mining.
 */
public class Block {

    // The hash of the current block
    public String hash;
    
    // The hash of the previous block in the chain
    public String previousHash;
    
    // The data stored in the block
    private String data;
    
    // Timestamp indicating when the block was created (in milliseconds)
    private long timeStamp;
    
    // The nonce used for mining (proof of work)
    //A nonce is a random or semi-random number generated by miners when they create a new block in the blockchain.
    private int nonce;
    
    /**
     * Constructs a new Block with the given data and reference to the previous block's hash.
     * @param data The data to be stored in the block.
     * @param previousHash The hash of the previous block in the chain.
     */
    public Block(String data, String previousHash) {
        this.data = data;
        this.previousHash = previousHash;
        this.timeStamp = new Date().getTime(); // Get current timestamp
        this.hash = calculateHash(); // Calculate initial hash
    }
    
    /**
     * Calculates the hash of the block using SHA-256.
     * The hash is based on the previous hash, timestamp, nonce, and data.
     * @return The computed SHA-256 hash of the block.
     */
    public String calculateHash() {
        return StringUtil.applySha256(
            previousHash +
            Long.toString(timeStamp) +
            Integer.toString(nonce) +
            data
        );
    }
    
    /**
     * Mines the block by finding a hash that meets the difficulty criteria.
     * The mining process involves incrementing the nonce until a valid hash is found.
     * @param difficulty The number of leading zeros required in the hash.
     */
    public void MineBlocks(int difficulty) {
        // Create a target string with 'difficulty' number of leading zeros
        String target = new String(new char[difficulty]).replace('\0', '0');
        
        // Adjust the nonce until the hash meets the difficulty criteria
        while (!hash.substring(0, difficulty).equals(target)) {
            nonce++;
            hash = calculateHash();
        }
        
        System.out.println("Block Mined!!: " + hash);
    }
}
